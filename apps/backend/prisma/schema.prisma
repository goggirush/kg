generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id             String  @id @default(cuid())
  title          String
  slug           String  @unique
  description    String?
  timeToComplete String?
  difficulty     String?
  genre          String?
  metaImageUrl   String?

  categories Category[]
  progress   UserProgress[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Category {
  id       String @id @default(cuid())
  title    String
  slug     String
  order    Int
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  slides Slide[]

  @@unique([slug, courseId]) // for upsert
}

model Slide {
  id       String  @id @default(cuid())
  slug     String
  title    String
  order    Int
  type     String
  isLocked Boolean @default(false)

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  quizResults QuizResult[]

  @@unique([slug, categoryId]) // for upsert
}

model SlideProgress {
  id          String    @id @default(cuid())
  userId      String
  slideId     String
  completed   Boolean   @default(false)
  startedAt   DateTime?
  completedAt DateTime?

  user   User   @relation(fields: [userId], references: [id])
}

model QuizResult {
  id        String   @id @default(cuid())
  userId    String
  slideId   String
  score     Int
  maxScore  Int
  createdAt DateTime @default(now())

  slide Slide @relation(fields: [slideId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model User {
  id    String  @id // Azure AD's Object ID (oid)
  email String? @unique
  name  String?

  progress       UserProgress[]
  quizResults    QuizResult[]
  slideProgress  SlideProgress[]
  queries        UserQuery[]
}

model UserProgress {
  id               String   @id @default(cuid())
  userId           String
  courseId         String
  visitedSlides    String[] @default([])
  lastCategorySlug String
  lastSlideSlug    String
  updatedAt        DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

// Generic SPARQL-queries available to all users
model ExampleQuery {
  id        String   @id @default(cuid())
  title     String
  description String?
  query     String
  createdAt DateTime @default(now())
}

// Personal sparql-queries
model UserQuery {
  id        String   @id @default(cuid())
  userId    String
  title     String
  description String?
  query     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User @relation(fields: [userId], references: [id])

  @@unique([userId, title])
}